function [fitresult, gof] = cpu_no_part_splru_1mb(number_of_active_cores, execution_time_in_cycles)
%CREATEFIT(NUMBER_OF_ACTIVE_CORES,EXECUTION_TIME_IN_CYCLES)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : number_of_active_cores
%      Y Output: execution_time_in_cycles
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 18-Jul-2016 18:19:26


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( number_of_active_cores, execution_time_in_cycles );

% Set up fittype and options.
ft = fittype( 'poly6' );
%opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
%opts.Display = 'Off';
%opts.StartPoint = [1.23676080755676 -0.0663822034989268 -0.251611660215572 -0.26456999919241];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'untitled fit 1' );
% h = plot( fitresult,'k', xData, yData, 'predobs','k square', 0.95 );
% legend( h, 'data', 'fitted curve', 'Lower and Upper bounds based on PI', 'Location', 'NorthWest' );


figure()
h1 = plot( fitresult,'k','predobs', 0.95 );
hold on
h2=plot(xData, yData,'k square', 'MarkerFaceColor',[0,0,0]);
disp('done')
legend([h1(1:2);h2], 'fitted curve', 'Lower and Upper bounds based on PI','data','Location', 'NorthWest' );
%  legend(h2,'data')
%  legend([h1 h2],{'Legend 1','Legend 2'})
%%
% Label axes
xlabel( 'number of interfering cores' );
ylabel( 'normalized increase in latency' );
grid off


